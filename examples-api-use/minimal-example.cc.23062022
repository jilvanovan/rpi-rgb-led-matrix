// -*- mode: c++; c-basic-offset: 2; indent-tabs-mode: nil; -*-
// Small example how to use the library.
// For more examples, look at demo-main.cc
//
// This code is public domain
// (but note, that the led-matrix library this depends on is GPL v2)

#include "led-matrix.h"
#include "graphics.h"

#include <unistd.h>
#include <math.h>
#include <stdio.h>
#include <signal.h>

#include <getopt.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

// using rgb_matrix::RGBMatrix;
// using rgb_matrix::Canvas;

using namespace rgb_matrix;

volatile bool interrupt_received = false;
static void InterruptHandler(int signo) {
  interrupt_received = true;
}

static bool parseColor(Color *c, const char *str) {
  return sscanf(str, "%hhu,%hhu,%hhu", &c->r, &c->g, &c->b) == 3;
}

static bool FullSaturation(const Color &c) {
  return (c.r == 0 || c.r == 255)
    && (c.g == 0 || c.g == 255)
    && (c.b == 0 || c.b == 255);
}

static void DrawOnCanvas(Canvas *canvas) {
  /*
   * Let's create a simple animation. We use the canvas to draw
   * pixels. We wait between each step to have a slower animation.
   */

  // canvas->Fill(255, 255, 255);
  // sleep(1);
  // canvas->Fill(255, 0, 0);
  // sleep(1);
  // canvas->Fill(0, 255, 0);
  // sleep(1);
  // canvas->Fill(0, 0, 255);
  // sleep(1);

  rgb_matrix::Font font;
  printf("Loading Font\n");
  if (!font.LoadFont("../fonts/helvR12.bdf")) {
    fprintf(stderr, "Couldn't load font '%s'\n", "error");
  }

  Color color(255, 255, 0);
  Color bg_color(0, 0, 0);
  Color flood_color(0, 0, 0);
  Color outline_color(0,0,0);
  canvas->Fill(flood_color.r, flood_color.g, flood_color.b);
  bool with_outline = false;

  // const char *bdf_font_file = NULL;
  int x_orig = 0;
  int y_orig = 0;
  int letter_spacing = 0;

  rgb_matrix::Font *outline_font = NULL;
  if (with_outline) {
    outline_font = font.CreateOutlineFont();
  }

  const int x = x_orig;
  int y = y_orig;
  char line[1024];
  // while (fgets(line, sizeof(line), stdin)) {
    // const size_t last = strlen(line);
    // if (last > 0) line[last - 1] = '\0';  // remove newline.
    // bool line_empty = strlen(line) == 0;
    // if ((y + font.height() > canvas->height()) || line_empty) {
    //   canvas->Fill(flood_color.r, flood_color.g, flood_color.b);
    //   y = y_orig;
    // }
    // if (line_empty)
    //   continue;
    // if (outline_font) {
    //   // The outline font, we need to write with a negative (-2) text-spacing,
    //   // as we want to have the same letter pitch as the regular text that
    //   // we then write on top.
    //   rgb_matrix::DrawText(canvas, *outline_font,
    //                        x - 1, y + font.baseline(),
    //                        outline_color, &bg_color, line, letter_spacing - 2);
    // }
    // The regular text. Unless we already have filled the background with
    // the outline font, we also fill the background here.
    // rgb_matrix::DrawText(canvas, font, x, y + font.baseline(),
    //                      color, outline_font ? NULL : &bg_color, "LOVE LOVE LOVE>",
    //                      letter_spacing-2);
    y += font.height();
    // sleep(1);
    
    // for (int j = 0; j < 17; j++) {
    //   for (int i = 191; i >= 128; i--) {
    //     canvas->SetPixel(i, j, 255, 0, 255);
    //   }
    //       usleep(50000);
    // }

    // for (int j = 16; j >=0; j--) {
    //   for (int i = 127; i >= 64; i--) {
    //     canvas->SetPixel(i, j, 255, 0, 255);
    //   }
    //       usleep(50000);
    // }

    // for (int j = 0; j < 17; j++) {
    //   for (int i = 64; i >= 0; i--) {
    //     canvas->SetPixel(i, j, 255, 0, 255);
    //   }
    //       usleep(50000);
    // }

        canvas->SetPixel(191, 0, 255, 0, 255);
        canvas->SetPixel(191, 15, 255, 0, 255);
        canvas->SetPixel(160, 0, 255, 0, 255);
        canvas->SetPixel(160, 15, 255, 0, 255);

        canvas->SetPixel(64, 0, 255, 0, 255);
        canvas->SetPixel(64, 15, 255, 0, 255);
        canvas->SetPixel(95, 0, 255, 0, 255);
        canvas->SetPixel(95, 15, 255, 0, 255);


      for (int i =68;i <86;i++)
      {
        canvas->SetPixel(i, 0, 255, 0, 255);
        canvas->SetPixel(i, 1, 255, 0, 255);
        canvas->SetPixel(i, 2, 255, 0, 255);
        canvas->SetPixel(i, 3, 255, 0, 255);
      }




        for (int j =4;j<5;j++ ){
              for (int i =84;i >80;i--){
        canvas->SetPixel(i, j, 255, 0, 255);}
        }
        for (int j =5;j<6;j++ ){
            for (int i =83;i >79;i--){
        canvas->SetPixel(i, j, 255, 0, 255);}
        }
        for (int j =6;j<7;j++ ){
            for (int i =82;i >78;i--){
        canvas->SetPixel(i, j, 255, 0, 255);}
        }
        for (int j =7;j<8;j++ ){
            for (int i =81;i >77;i--){
        canvas->SetPixel(i, j, 255, 0, 255);}
        }
        for (int j =8;j<9;j++ ){
            for (int i =80;i >76;i--){
        canvas->SetPixel(i, j, 255, 0, 255);}
        }
        for (int j =9;j<10;j++ ){
            for (int i =79;i >75;i--){
        canvas->SetPixel(i, j, 255, 0, 255);}
        }
        for (int j =10;j<11;j++ ){
            for (int i =78;i >74;i--){
        canvas->SetPixel(i, j, 255, 0, 255);}
        }
        for (int j =11;j<12;j++ ){
            for (int i =77;i >73;i--){
        canvas->SetPixel(i, j, 255, 0, 255);}
        }
        for (int j =12;j<13;j++ ){
            for (int i =76;i >72;i--){
        canvas->SetPixel(i, j, 255, 0, 255);}
        }
        for (int j =13;j<14;j++ ){
            for (int i =75;i >71;i--){
        canvas->SetPixel(i, j, 255, 0, 255);}
        }
        for (int j =14;j<15;j++ ){
            for (int i =74;i >70;i--){
        canvas->SetPixel(i, j, 255, 0, 255);}
        }
        for (int j =15;j<16;j++ ){
            for (int i =73;i >69;i--){
        canvas->SetPixel(i, j, 255, 0, 255);}
        }

        for (int j =15;j<16;j++ ){
            for (int i =73;i >69;i--){
        canvas->SetPixel(i, j, 255, 0, 255);}
        }



      for (int i =183;i <187;i++)
      {
        canvas->SetPixel(i, 15, 255, 0, 255);
        canvas->SetPixel(i, 14, 255, 0, 255);
        canvas->SetPixel(i, 13, 255, 0, 255);
        canvas->SetPixel(i, 12, 255, 0, 255);
      }

      for (int i =182;i <186;i++)
      {
        canvas->SetPixel(i, 11, 255, 0, 255);
        canvas->SetPixel(i, 10, 255, 0, 255);
      }

      for (int i =181;i <185;i++)
      {
        canvas->SetPixel(i, 9, 255, 0, 255);
        canvas->SetPixel(i, 8, 255, 0, 255);
      }

      for (int i =180;i <184;i++)
      {
        canvas->SetPixel(i, 7, 255, 0, 255);
        canvas->SetPixel(i, 6, 255, 0, 255);
      }

      for (int i =179;i <183;i++)
      {
        canvas->SetPixel(i, 5, 255, 0, 255);
        canvas->SetPixel(i, 4, 255, 0, 255);
      }

      for (int i =173;i <181;i++)
      {
        canvas->SetPixel(i, 4, 255, 0, 255);
        canvas->SetPixel(i, 3, 255, 0, 255);
        canvas->SetPixel(i, 2, 255, 0, 255);
      }

          for (int i =170;i <175;i++)
      {
        // canvas->SetPixel(i, 6, 255, 0, 255);
        canvas->SetPixel(i, 5, 255, 0, 255);
        canvas->SetPixel(i, 4, 255, 0, 255);
      }

          for (int i =173;i <175;i++)
      {
                canvas->SetPixel(i, 8, 255, 0, 255);
        canvas->SetPixel(i, 7, 255, 0, 255);
        canvas->SetPixel(i, 6, 255, 0, 255);
        canvas->SetPixel(i, 5, 255, 0, 255);
      }

      // for (int i =84;i >80;i--)
      // {
      //   for (int j =4;j<8;j++ )
      //   canvas->SetPixel(i, j, 255, 0, 255);
      // }

        sleep(5);
    


    // for (int j = 0; j < 17; j++) {
    //   for (int i = 127; i >= 64; i--) {
    //     canvas->SetPixel(i, j, 255, 0, 255);
    //   }
    //       usleep(50000);
    // }

    // for (int j = 16; j >= 0; j--) {
    //   for (int i = 0; i < 64; i++) {
    //   canvas->SetPixel(i, j, 255, 0, 255);
    //   }
    //   usleep(50000);
    // }

    // canvas->SetPixel(0, 0, 255, 0, 0);


  // int center_x = canvas->width() / 2;
  // int center_y = canvas->height() / 2;
  // float radius_max = canvas->width() / 2;
  // float angle_step = 1.0 / 360;
  // for (float a = 0, r = 0; r < radius_max; a += angle_step, r += angle_step) {
  //   if (interrupt_received)
  //     return;
  //   float dot_x = cos(a * 2 * M_PI) * r;
  //   float dot_y = sin(a * 2 * M_PI) * r;
  //   canvas->SetPixel(center_x + dot_x, center_y + dot_y,
  //                    255, 0, 0);
  //   usleep(1 * 1000);  // wait a little to slow down things.
  // }
  // }
}

int main(int argc, char *argv[]) {
  RGBMatrix::Options defaults;
  RuntimeOptions defaults2;
  defaults.hardware_mapping = "classic-pi1";  // or e.g. "adafruit-hat"
  defaults.rows = 16;
  defaults.cols = 32;
  defaults.chain_length = 6;
  defaults.parallel = 1;
  defaults.show_refresh_rate = true;
  defaults.brightness = 10;
  defaults.multiplexing=11;
  defaults.led_rgb_sequence="BGR";
  defaults.row_address_type=0;
  defaults2.gpio_slowdown=5;
  Canvas *canvas = RGBMatrix::CreateFromFlags(&argc, &argv, &defaults);
  if (canvas == NULL)
    return 1;

  // It is always good to set up a signal handler to cleanly exit when we
  // receive a CTRL-C for instance. The DrawOnCanvas() routine is looking
  // for that.
  signal(SIGTERM, InterruptHandler);
  signal(SIGINT, InterruptHandler);

  DrawOnCanvas(canvas);    // Using the canvas.
  sleep(1);
  // Animation finished. Shut down the RGB matrix.
  canvas->Clear();
  delete canvas;

  return 0;
}
